{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title:  A Mapplotlib theme for IOM\n",
        "subtitle: How-to\n",
        "date: today\n",
        "author: Edouard Legoupil, Chief Data Officer, IOM\n",
        "format: quarto_iom_article-html\n",
        "project:\n",
        "  type: website\n",
        "jupyter: python3\n",
        "execute:\n",
        "  engine: jupyter\n",
        "  eval: true\n",
        "toc: true\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Examples in Practice \n",
        "\n",
        "The World Bank Data API offer a series of indicators in relation with migration:\n",
        "\n",
        "### Core Migration Metrics\n",
        "- `SM.POP.NETM`: Net migration — The net total of migrants during a period (immigrants minus emigrants)\n",
        "- `SM.POP.MIGR`: Net migration rate — The net number of migrants per 1,000 population during a period\n",
        "- `SM.POP.TOTL`: International migrant stock, total — The total number of people living in a country other than where they were born\n",
        "- `SM.POP.TOTL.ZS`: International migrant stock (% of population) — Migrant population as percentage of total population\n",
        "\n",
        "### Remittances\n",
        "- `BX.TRF.PWKR.CD.DT`: Personal remittances received (current US$) — Sum of personal transfers and compensation, Migrant worker transfers and border worker salaries\n",
        "- `BX.TRF.PWKR.DT.GD.ZS`: Personal remittances (% of GDP) — Remittances as percentage of GDP\n",
        "- `SI.RMT.COST.OB.ZS`: Average transaction cost of sending remittances from a specific country (%)\n",
        "- `SI.RMT.COST.IB.ZS`: Average transaction cost of sending remittances to a specific country (%)\n",
        "\n",
        "\n",
        "\n",
        "### Pulling the geographic reference\n",
        "\n",
        "We will use the [wbdata module](https://wbdata.readthedocs.io/en/stable/)\n"
      ],
      "id": "122c756f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import wbdata\n",
        "import pandas as pd\n",
        "# Fetch country information from World Bank API\n",
        "geo = wbdata.get_countries()\n",
        "# Convert to DataFrame\n",
        "geo = pd.DataFrame(geo)\n",
        "# Extract nested dictionary information\n",
        "geo['region'] = geo['region'].apply(lambda x: x['value'] if isinstance(x, dict) else None)\n",
        "geo['adminregion'] = geo['adminregion'].apply(lambda x: x['value'] if isinstance(x, dict) else None)\n",
        "geo['incomeLevel'] = geo['incomeLevel'].apply(lambda x: x['value'] if isinstance(x, dict) else None)\n",
        "geo['lendingType'] = geo['lendingType'].apply(lambda x: x['value'] if isinstance(x, dict) else None)\n",
        "# Convert columns to appropriate data types\n",
        "geo['longitude'] = pd.to_numeric(geo['longitude'], errors='coerce')\n",
        "geo['latitude'] = pd.to_numeric(geo['latitude'], errors='coerce')\n",
        "# Set index to country ID\n",
        "geo.set_index('id', inplace=True)"
      ],
      "id": "bd8e7a85",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import sys\n",
        "sys.path.append(\"iompyplotstyle\")  # Add custom path\n",
        "import iompyplotstyle "
      ],
      "id": "a82200e6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Column chart \n",
        "In a column chart, each category is represented by a vertical rectangle, with the height of the rectangle being proportional to the values being plotted. \n",
        "The chart with `iompyplotstyle` + `column` styles:\n",
        "\n",
        "for the first two examples, we will look at Migrant Stock for Developped Countries\n"
      ],
      "id": "dd4a4fb9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import wbdata\n",
        "\n",
        "# Fetch the data\n",
        "migrant_stock = wbdata.get_dataframe({\"SM.POP.NETM\": \"Net Migration\"}, country='all', date=(\"2013\",\"2023\"), freq='Y', source=None, parse_dates=False, keep_levels=False, skip_cache=False)\n",
        "# \"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"\n",
        "# Reset the index of the main DataFrame to make 'country' a column\n",
        "migrant_stock = migrant_stock.reset_index()\n",
        "migrant_stock.rename(columns={'country': 'country_name', 'date': 'year'}, inplace=True)\n",
        "# Merge the main DataFrame with the country info to get the country code\n",
        "migrant_stock = pd.merge(migrant_stock, geo, left_on='country_name', right_on='name', how='left')\n",
        "#print(migrant_stock.columns)\n",
        "#print(migrant_stock['year'].unique())"
      ],
      "id": "be57dddd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's now calculate Net Migration Series in OECD Countries\n"
      ],
      "id": "75446574"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Clean up - drop rows with missing values and convert to numeric\n",
        "migrant_stock = migrant_stock.dropna(subset=['Net Migration'])\n",
        "migrant_stock['Net Migration'] = pd.to_numeric(migrant_stock['Net Migration'])\n",
        "migrant_stock['year'] = pd.to_numeric(migrant_stock['year'])\n",
        "\n",
        "all_migrant_stock_oecd_2013_2023 = (\n",
        "    migrant_stock[['country_name', 'Net Migration', 'region', 'incomeLevel','year' ]]\n",
        "    .query(\"country_name == 'OECD members'\")   \n",
        "    .sort_values('year', ascending=False)\n",
        "    .head(10)\n",
        "    .reset_index(drop=True)\n",
        ")\n",
        "# Save the top10_migrant_stock DataFrame to CSV\n",
        "all_migrant_stock_oecd_2013_2023.to_csv('data-raw/column.csv', index=False)"
      ],
      "id": "acaeba7e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Basic column chart\n"
      ],
      "id": "5c1625a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import iompyplotstyle \n",
        "plt.style.use(['iompyplotstyle','column'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/column.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "x = df['year']\n",
        "y = df['Net Migration']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.bar(x, y)\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Net Migration in OECD Countries')\n",
        "\n",
        "#set y-axis title\n",
        "ax.set_ylabel('Individuals (millions)')\n",
        "\n",
        "#set y-axis labels\n",
        "ax.tick_params(labelleft=True)\n",
        "\n",
        "#set y-axis limit\n",
        "ylimit = plt.ylim(0,  max(y)+0.1*(max(y)))\n",
        "\n",
        "#set tick based on x value\n",
        "ax.set_xticks(x)\n",
        "\n",
        "#set grid\n",
        "ax.grid(axis='y')\n",
        "\n",
        "#format y-axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x >= 1e3:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -25), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -35), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "deab4352",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Column chart with data label\n"
      ],
      "id": "8101afd2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "plt.style.use(['iompyplotstyle','column'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/column.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "x = df['year']\n",
        "y = df['Net Migration']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.bar(x, y)\n",
        "\n",
        "#format y-axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x >= 1e3:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Net Migration in OECD Countries')\n",
        "\n",
        "#set subtitle\n",
        "#plt.suptitle('Number of people in millions', x=0.025, y=0.88, ha='left')"
      ],
      "id": "11cf04e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Bar chart \n",
        "A bar chart is a chart in which each category is represented by a horizontal rectangle, with the length of the rectangle proportional to the values being plotted. The horizontal axis shows data value, and the vertical axis displays the categories being compared.\n",
        "\n",
        "The chart with `iompyplotstyle` + `bar` styles:\n",
        "\n",
        "Let's compute net migration for High Income Countries in 2023: "
      ],
      "id": "7be091a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Clean up - drop rows with missing values and convert to numeric\n",
        "migrant_stock = migrant_stock.dropna(subset=['Net Migration'])\n",
        "migrant_stock['Net Migration'] = pd.to_numeric(migrant_stock['Net Migration'])\n",
        "\n",
        "top10_migrant_stock_high_income_2023 = (\n",
        "    migrant_stock[['country_name', 'Net Migration', 'region', 'incomeLevel','year' ]]\n",
        "    .query(\"incomeLevel == 'High income'  & year == '2023'\")  \n",
        "    .sort_values('Net Migration', ascending=False)\n",
        "    .head(10)\n",
        "    .reset_index(drop=True)\n",
        ")\n",
        "# Save the top10_migrant_stock DataFrame to CSV\n",
        "top10_migrant_stock_high_income_2023.to_csv('data-raw/bar.csv', index=False)"
      ],
      "id": "66eb4737",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Basic bar chart\n"
      ],
      "id": "887a5855"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from textwrap import wrap\n",
        "plt.style.use(['iompyplotstyle','bar'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/bar.csv')\n",
        "\n",
        "#sort value in descending order\n",
        "df.sort_values('Net Migration',inplace=True)\n",
        "\n",
        "#prepare data array for plotting\n",
        "x = df['country_name']\n",
        "y = df['Net Migration']\n",
        "\n",
        "#wrap long labels\n",
        "x = [ '\\n'.join(wrap(l, 20)) for l in x ]\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.barh(x, y)\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Top 10 Net Migration in High Income Countries | 2023')\n",
        "\n",
        "#set x-axis title\n",
        "ax.set_xlabel('Individuals')\n",
        "\n",
        "#set x-axis label\n",
        "ax.tick_params(labelbottom=True)\n",
        "\n",
        "#set x-axis limit\n",
        "xlimit = plt.xlim(0, max(y)+0.1*(max(y)))\n",
        "\n",
        "#show grid below the bars\n",
        "ax.grid(axis='x')\n",
        "\n",
        "#format x-axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x >= 1e3:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.xaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "f98d53e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Bar chart with data label\n"
      ],
      "id": "b5c81516"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from textwrap import wrap\n",
        "plt.style.use(['iompyplotstyle','bar'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/bar.csv')\n",
        "\n",
        "#sort value in descending order\n",
        "df.sort_values('Net Migration', inplace=True)\n",
        "\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Top 10 Net Migration in High Income Countries | 2023')\n",
        "\n",
        "#prepare data array for plotting\n",
        "x = df['country_name']\n",
        "y = df['Net Migration']\n",
        "\n",
        "#wrap long labels\n",
        "x = [ '\\n'.join(wrap(l, 20)) for l in x ]\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.barh(x, y)"
      ],
      "id": "2e2a6b9b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Line chart \n",
        "\n",
        "A line chart is a type of chart that displays the evolution of one or several numeric variables over a continuous interval or time period. Typically, the x-axis is used for a timescale or a sequence of intervals, while the y-axis reports values across that progression.\n",
        "\n",
        "The chart with `iompyplotstyle` + `line` styles:\n"
      ],
      "id": "0cea28fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import wbdata\n",
        "remittance = wbdata.get_dataframe(\n",
        "        indicators={'BX.TRF.PWKR.CD.DT': 'remittance' },\n",
        "        country='all', \n",
        "        date=(\"2013\",\"2023\"), \n",
        "        freq='Y', \n",
        "        source=None, \n",
        "        parse_dates=False, \n",
        "        keep_levels=False, \n",
        "        skip_cache=False\n",
        "    )\n",
        "remittance = remittance.reset_index()\n",
        "remittance.rename(columns={'country': 'country_name', 'date': 'year'}, inplace=True)\n",
        "remittance = pd.merge(remittance, geo, left_on='country_name', right_on='name', how='left')    "
      ],
      "id": "af5bbd04",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "remittance_world = (\n",
        "    remittance[['country_name', 'remittance','year' ]]\n",
        "    .query(\"country_name == 'World'\")  \n",
        "    .sort_values('year', ascending=False)\n",
        ")\n",
        "remittance_world.to_csv('data-raw/line.csv', index=False)"
      ],
      "id": "ea6ae936",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Single line chart\n"
      ],
      "id": "fd47530a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import iompyplotstyle\n",
        "#plt.style.use(['iompyplotstyle','line'])\n",
        "\n",
        "#compute data array for plotting\n",
        "df = pd.read_csv('data-raw/line.csv')\n",
        "\n",
        "#compute data for plotting\n",
        "x = df['year']\n",
        "y = df['remittance']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.plot(x, y)\n",
        "\n",
        "#set chart title\n",
        "plt.title('Evolution of Remittance ')\n",
        "#plt.suptitle('Personal transfers/compensation received')\n",
        "#set y-axis label\n",
        "ax.set_ylabel('(current US$)')\n",
        "\n",
        "#set y-axis limit\n",
        "ylimit = plt.ylim(0,  max(y)+0.1*(max(y)))\n",
        "\n",
        "#format x-axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    \"\"\"Format axis tick labels with appropriate units (K, M, B)\"\"\"\n",
        "    if abs(x) >= 1e9:  # Billions\n",
        "        s = '{:1.1f}B'.format(x*1e-9)\n",
        "    elif abs(x) >= 1e6:  # Millions\n",
        "        s = '{:1.1f}M'.format(x*1e-6)\n",
        "    elif abs(x) >= 1e3:  # Thousands\n",
        "        s = '{:1.1f}K'.format(x*1e-3)\n",
        "    else:  # Units\n",
        "        s = '{:1.0f}'.format(x)\n",
        "    \n",
        "    # Remove .0 from whole numbers for cleaner display\n",
        "    if '.0' in s:\n",
        "        s = s.replace('.0', '')\n",
        "    return s\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -25), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -35), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "16f38f91",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Multiple line chart\n"
      ],
      "id": "2df8b354"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#print(remittance['country_name'].unique())\n",
        "demographic_categories = [\n",
        "    'Early-demographic dividend',\n",
        "    'Late-demographic dividend',\n",
        "    'Post-demographic dividend',\n",
        "    'Pre-demographic dividend'\n",
        "]\n",
        "\n",
        "remittance_demo = (\n",
        "    remittance[['country_name', 'remittance','year' ]]\n",
        "    .query(\"country_name in @demographic_categories\")  \n",
        "    .sort_values('year', ascending=False)\n",
        ")\n",
        "remittance_demo = remittance_demo.pivot(index='year', columns='country_name', values='remittance')\n",
        "remittance_demo = remittance_demo.reset_index()\n",
        "remittance_demo.to_csv('data-raw/line2.csv', index=False)"
      ],
      "id": "1e339125",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "#plt.style.use(['iompyplotstyle','line'])\n",
        "\n",
        "#compute data array for plotting\n",
        "df = pd.read_csv('data-raw/line2.csv')\n",
        "\n",
        "\n",
        "\n",
        "#compute data for plotting\n",
        "x = df['year']\n",
        "y1 = df['Early-demographic dividend']\n",
        "y2 = df['Late-demographic dividend']\n",
        "y3 = df['Post-demographic dividend']\n",
        "y4 = df['Pre-demographic dividend'] \n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "bar_plot = ax.plot(x, y1)\n",
        "bar_plot = ax.plot(x, y2)\n",
        "bar_plot = ax.plot(x, y3)\n",
        "bar_plot = ax.plot(x, y4)\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Remittance Vs Demographic Dividend')\n",
        "\n",
        "#set y-axis label\n",
        "ax.set_ylabel('(current US$)')\n",
        "\n",
        "#set y-axis limit\n",
        "#ylimit = plt.ylim(0, 60 * 1e6)\n",
        "\n",
        "#set direct labeling for lines\n",
        "\n",
        "early_xpos=x.iloc[-1]\n",
        "early_ypos=y1.iloc[-1]\n",
        "plt.annotate(\"Early\", (early_xpos,early_ypos),\n",
        "                 textcoords=\"offset points\",\n",
        "                 xytext=(0,10), \n",
        "                 ha='center')\n",
        "\n",
        "late_xpos=x.iloc[-1]\n",
        "late_ypos=y2.iloc[-1]\n",
        "plt.annotate(\"Late\", (late_xpos,late_ypos),\n",
        "                 textcoords=\"offset points\",\n",
        "                 xytext=(0,10), \n",
        "                 ha='left')\n",
        "\n",
        "post_xpos=x.iloc[-1]\n",
        "post_ypos=y3.iloc[-1]\n",
        "plt.annotate(\"Post\", (post_xpos,post_ypos),\n",
        "                 textcoords=\"offset points\",\n",
        "                 xytext=(0,10), \n",
        "                 ha='left')\n",
        "\n",
        "pre_xpos=x.iloc[-1]\n",
        "pre_ypos=y4.iloc[-1]\n",
        "plt.annotate(\"Pre\", (pre_xpos,pre_ypos),\n",
        "                 textcoords=\"offset points\",\n",
        "                 xytext=(0,10), \n",
        "                 ha='left')                 \n",
        "\n",
        "\n",
        "#format x-axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    \"\"\"Format axis tick labels with appropriate units (K, M, B)\"\"\"\n",
        "    if abs(x) >= 1e9:  # Billions\n",
        "        s = '{:1.1f}B'.format(x*1e-9)\n",
        "    elif abs(x) >= 1e6:  # Millions\n",
        "        s = '{:1.1f}M'.format(x*1e-6)\n",
        "    elif abs(x) >= 1e3:  # Thousands\n",
        "        s = '{:1.1f}K'.format(x*1e-3)\n",
        "    else:  # Units\n",
        "        s = '{:1.0f}'.format(x)\n",
        "    \n",
        "    # Remove .0 from whole numbers for cleaner display\n",
        "    if '.0' in s:\n",
        "        s = s.replace('.0', '')\n",
        "    return s\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -25), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -35), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "8c372f99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Scatterplot \n",
        "A scatterplot is a type of visualization using Cartesian Coordinates to display two variables for a set of data. The data are displayed as a collection of dots. The position of each dot on the horizontal and vertical axis indicates the values for an individual data point.\n",
        "\n",
        "The chart with `iompyplotstyle` + `scatterplot` styles:\n"
      ],
      "id": "b6301968"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import wbdata\n",
        "pop_and_perc = wbdata.get_dataframe(\n",
        "        indicators={'SP.POP.TOTL': 'total_population',\n",
        "                    'SM.POP.TOTL.ZS': 'percent_migrant',\n",
        "                    'NY.GDP.PCAP.CD': 'gdp_capita' },\n",
        "        country='all', \n",
        "        date=(\"2015\"), \n",
        "        freq='Y', \n",
        "        source=None, \n",
        "        parse_dates=False, \n",
        "        keep_levels=False, \n",
        "        skip_cache=False\n",
        "    )\n",
        "pop_and_perc = pop_and_perc.reset_index()\n",
        "pop_and_perc.rename(columns={'country': 'country_name', 'date': 'year'}, inplace=True)\n",
        "pop_and_perc = pd.merge(pop_and_perc, geo, left_on='country_name', right_on='name', how='left')    \n",
        "# Clean up - drop rows with missing values and convert to numeric\n",
        "pop_and_perc = pop_and_perc.dropna(subset=['total_population'])\n",
        "pop_and_perc = pop_and_perc.dropna(subset=['percent_migrant'])"
      ],
      "id": "48e5dfb5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pop_and_perc_high = (\n",
        "    pop_and_perc[['country_name', 'percent_migrant', 'total_population',  'incomeLevel', 'region', 'gdp_capita' ]]\n",
        "    .query(\"incomeLevel == 'High income'\")  \n",
        "    .sort_values('total_population', ascending=False)\n",
        "    .head(10)\n",
        ")\n",
        "pop_and_perc_high.to_csv('data-raw/scatterplot.csv', index=False)"
      ],
      "id": "0201ea8e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Scatterplot\n"
      ],
      "id": "84b032a9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "plt.style.use(['iompyplotstyle','scatterplot'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/scatterplot.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "x = df['total_population']\n",
        "y = df['percent_migrant']\n",
        "label = df['country_name']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(x, y, s=30)\n",
        "\n",
        "# Loop for annotation of all points\n",
        "for i in range(len(x)):\n",
        "    plt.annotate(label[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='left')\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Migrants and Population for top 10 largest High Income Countries | 2015')\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('Total Population (millions)')\n",
        "ax.set_ylabel('Share of Migrants (%)')\n",
        "\n",
        "#format axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x > 0:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.xaxis.set_major_formatter(number_formatter)\n",
        "#ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "a3e9488c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Scatterplot with colours\n"
      ],
      "id": "40f6bd37"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "plt.style.use(['iompyplotstyle','scatterplot'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/scatterplot.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "x = df['total_population']\n",
        "y = df['percent_migrant']\n",
        "label = df['country_name']\n",
        "regions = df['region']\n",
        "# Create a color mapping for regions\n",
        "unique_regions = regions.unique()\n",
        "color_palette = ['#00B398', '#E1CC0D', '#589BE5']  # Your chosen colors\n",
        "region_colors = {region: color_palette[i] for i, region in enumerate(unique_regions)}\n",
        "\n",
        "# Map each point to its region color\n",
        "point_colors = [region_colors[region] for region in regions]\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "scatter = ax.scatter(x, y, s=100, c=point_colors, alpha=0.7)  # Increased point size and added transparency\n",
        "\n",
        "# Loop for annotation of all points\n",
        "for i in range(len(x)):\n",
        "    plt.annotate(label[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='left')\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Migrants and Population for top 10 largest High Income Countries | 2015')\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('Total Population (millions)')\n",
        "ax.set_ylabel('Share of Migrants (%)')\n",
        "\n",
        "#format axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x > 0:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.xaxis.set_major_formatter(number_formatter)\n",
        "#ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "86366cc2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Bubble chart \n",
        "\n",
        "A bubble chart displays multi-dimensional data in a two-dimensional plot. It can be considered as a variation of the scatterplot, in which the dots are replaced with bubbles. However, unlike a scatterplot which has only two variables defined by the X and Y axis, on a bubble chart each data point (bubble) can be assigned with a third variable (by size of bubble) and a fourth variable (by colour of bubble).\n",
        "\n",
        "#### Bubble chart  \n"
      ],
      "id": "221bf9d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "plt.style.use(['iompyplotstyle','bubble'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/scatterplot.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "size = df['total_population']\n",
        "y = df['percent_migrant']\n",
        "x = df['gdp_capita']\n",
        "label = df['country_name']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(x, y, s=size/100000)\n",
        "\n",
        "# Loop for annotation of all points\n",
        "for i in range(len(x)):\n",
        "    plt.annotate(label[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='left')\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Migrants, Population & Wealt for top 10 largest High Income Countries | 2015')\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('GDP per capita (USD)')\n",
        "ax.set_ylabel('Share of Migrants (%)')\n",
        "\n",
        " \n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "56220a89",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Bubble chart with colours"
      ],
      "id": "ee5bcf51"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "plt.style.use(['iompyplotstyle','bubble'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/scatterplot.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "size = df['total_population']\n",
        "y = df['percent_migrant']\n",
        "x = df['gdp_capita']\n",
        "label = df['country_name']\n",
        "regions = df['region']\n",
        "# Create a color mapping for regions\n",
        "unique_regions = regions.unique()\n",
        "color_palette = ['#00B398', '#E1CC0D', '#589BE5']  # Your chosen colors\n",
        "region_colors = {region: color_palette[i] for i, region in enumerate(unique_regions)}\n",
        "\n",
        "# Map each point to its region color\n",
        "point_colors = [region_colors[region] for region in regions]\n",
        " \n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "scatter = ax.scatter(x, y, s=size/100000, c=point_colors, alpha=0.7)  # Increased point size and added transparency\n",
        "\n",
        "\n",
        "# Loop for annotation of all points\n",
        "for i in range(len(x)):\n",
        "    plt.annotate(label[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='left')\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Comparison of refugee and IDP population by region | 2021')\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('Number of refugees (millions)')\n",
        "ax.set_ylabel('Number of IDPs (millions)')\n",
        "\n",
        "#format axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.0f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x > 0:\n",
        "        s = '{:1.0f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.xaxis.set_major_formatter(number_formatter)\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "a1156916",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Connected scatterplot \n",
        "A connected scatterplot is a type of visualization that displays the evolution of a series of data points that are connected by straight line segments. In some cases, it is not the most intuitive to read; but it is impressive for storytelling.\n"
      ],
      "id": "7c62cab3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "plt.style.use(['iompyplotstyle', 'connected_scatterplot'])\n",
        "\n",
        "#load data set\n",
        "df = pd.read_csv('data-raw/scatterplot_connected.csv')\n",
        "\n",
        "#compute data array for plotting\n",
        "x = df['refugee_number']\n",
        "y = df['idp_number']\n",
        "z = df['year']\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "ax.plot(x, y, marker='o')\n",
        "\n",
        "# Loop for annotation of all points\n",
        "for i in range(len(x)):\n",
        "    plt.annotate(z[i], (x[i], y[i]), textcoords=\"offset points\", xytext=(3,3), ha='left')\n",
        "    \n",
        "limx = plt.xlim(2000000, 4000000)\n",
        "limy = plt.ylim(0, 4000000)\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Evolution of refugee vs IDP population in Afghanistan | 2001-2021')\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('Number of refugees (millions)')\n",
        "ax.set_ylabel('Number of IDPs (millions)')\n",
        "\n",
        "#format axis tick labels\n",
        "def number_formatter(x, pos):\n",
        "    if x >= 1e6:\n",
        "        s = '{:1.1f}M'.format(x*1e-6)\n",
        "    elif x < 1e6 and x > 0:\n",
        "        s = '{:1.1f}K'.format(x*1e-3)\n",
        "    else: \n",
        "        s = '{:1.0f}'.format(x)\n",
        "    return s\n",
        "ax.xaxis.set_major_formatter(number_formatter)\n",
        "ax.yaxis.set_major_formatter(number_formatter)\n",
        "ax.xaxis.set_major_locator(MaxNLocator(4))\n",
        "ax.yaxis.set_major_locator(MaxNLocator(4))\n",
        "\n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "39dbfc89",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Heatmap \n",
        "A heatmap is a type of visualization that values are depicted through variations in colour within a two-dimensional matrix of cells. It allows us to visualize complex data and understand it at a glance.\n"
      ],
      "id": "d1ab2d77"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# import libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "from textwrap import wrap\n",
        "plt.style.use(['iompyplotstyle', 'heatmap'])\n",
        "\n",
        "#load and reshape data set\n",
        "df = pd.read_csv('data-raw/heatmap.csv')\n",
        "\n",
        "df = df.pivot(index='location', columns='year', values='values')\n",
        "\n",
        "#wrap the long labels\n",
        "y = ['Americas', 'Asia and Pacific', 'East and Horn of Africa and Great Lakes', 'Europe (incl. Turkey)','Middle East/North Africa','Southern Africa', 'West and Central Africa']\n",
        "y = [ '\\n'.join(wrap(l, 20)) for l in y ]\n",
        "\n",
        "#plot the chart\n",
        "fig, ax = plt.subplots()\n",
        "ax = sns.heatmap(df, annot=True, linewidths=.5, yticklabels=y, square=True, cmap=['#DCE9FF','#8EBEFF','#589BE5','#0072BC','#044F85'], cbar=False, fmt=\".1f\")\n",
        "\n",
        "#set chart title\n",
        "ax.set_title('Refugee population by region | 2011-2020')\n",
        "\n",
        "#set subtitle\n",
        "plt.suptitle('Number of people in millions', x=0.345, y=0.87)\n",
        "\n",
        "#set axis label\n",
        "ax.set_xlabel('')\n",
        "ax.set_ylabel('')\n",
        "               \n",
        "#set chart source and copyright\n",
        "plt.annotate('Source: World Bank Data API', (0,0), (0, -30), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "plt.annotate(' ', (0,0), (0, -40), xycoords='axes fraction', textcoords='offset points', va='top', color = '#666666', fontsize=9)\n",
        "\n",
        "#adjust chart margin and layout\n",
        "fig.tight_layout()\n",
        "\n",
        "#show chart\n",
        "plt.show()"
      ],
      "id": "06d875a7",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\elegoupil\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}